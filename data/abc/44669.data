{'TMP': 'C:\\Users\\shuvam\\AppData\\Local\\Temp', 'COMPUTERNAME': 'WIN-3RB954H3138', 'LIB': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Lib;C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\WinSDK\\Lib;C:\\Program Files\\SQLXML 4.0\\bin\\', 'USERDOMAIN': 'WIN-3RB954H3138', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'LIBPATH': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Lib;C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\WinSDK\\Lib;', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3a09', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin;C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\WinSDK\\Bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;c:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;c:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;c:\\Python27\\;c:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\VSShell\\Common7\\IDE\\;c:\\sysinternals\\;c:\\Program Files\\Notepad++\\;C:\\Program Files\\Git\\cmd', 'WINDOWS_TRACING_FLAGS': '3', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\shuvam\\AppData\\Local', 'HOMEPATH': '\\Users\\shuvam', 'WINDOWSSDKDIR': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\WinSDK\\', 'USERNAME': 'shuvam', 'LOGONSERVER': '\\\\WIN-3RB954H3138', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'INCLUDE': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Include;C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\WinSDK\\Include;', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'TEMP': 'C:\\Users\\shuvam\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '2', 'APPDATA': 'C:\\Users\\shuvam\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'USERPROFILE': 'C:\\Users\\shuvam', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'VCINSTALLDIR': 'C:\\Users\\shuvam\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\'}