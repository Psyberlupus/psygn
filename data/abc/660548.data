{'TMP': 'C:\\Users\\USER\\AppData\\Local\\Temp', 'COMPUTERNAME': 'WIN-TT1GURUMRUK', 'USERDOMAIN': 'WIN-TT1GURUMRUK', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 158 Stepping 10, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '9e0a', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Python27\\lib\\site-packages\\pywin32_system32;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python27\\;C:\\Python27\\scripts\\;', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\USER\\AppData\\Local\\Temp', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'SESSIONNAME': 'Console', 'HOMEPATH': '\\Users\\USER', 'USERDOMAIN_ROAMINGPROFILE': 'WIN-TT1GURUMRUK', 'USERNAME': 'USER', 'LOGONSERVER': '\\\\WIN-TT1GURUMRUK', 'PROMPT': '$P$G', 'LOCALAPPDATA': 'C:\\Users\\USER\\AppData\\Local', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\USER\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '1', 'PROCESSOR_LEVEL': '6', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\USER'}